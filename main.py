# Вам дается последовательность целых чисел и вам нужно ее обработать и вывести на экран сумму первой пятерки чисел из этой последовательности, затем сумму второй пятерки, и т. д.
#
# Но последовательность не дается вам сразу целиком. С течением времени к вам поступают её последовательные части.
# Например, сначала первые три элемента, потом следующие шесть, потом следующие два и т. д.

# Реализуйте класс Buffer, который будет накапливать в себе элементы последовательности и выводить сумму пятерок последовательных элементов по мере их накопления.
# Одним из требований к классу является то, что он не должен хранить в себе больше элементов, чем ему действительно необходимо,
# т.е. он не должен хранить элементы, которые уже вошли в пятерку, для которой была выведена сумма.

class Buffer:
    def __init__(self):  # конструктор без аргументов
        self.list_numbers = []
        self.sum_numbers = 0
        self.count = 0

    def add(self, *a):  # добавить следующую часть последовательности
        for arg in a:
            self.list_numbers.append(arg)
        while len(self.list_numbers) >= 5:
            for number in self.list_numbers:
                if self.count != 5:
                    self.sum_numbers += number
                    self.count += 1
            print(self.sum_numbers)
            self.sum_numbers = 0
            self.count = 0
            self.list_numbers = self.list_numbers[5:]
        print(self.list_numbers)

    def get_current_part(self):  # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были добавлены
        return self.list_numbers


buf = Buffer()
buf.add(1, 2, 3)
buf.get_current_part() # вернуть [1, 2, 3]
buf.add(4, 5, 6) # print(15) – вывод суммы первой пятерки элементов
buf.get_current_part() # вернуть [6]
buf.add(7, 8, 9, 10) # print(40) – вывод суммы второй пятерки элементов
buf.get_current_part() # вернуть []
buf.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # print(5), print(5) – вывод сумм третьей и четвертой пятерки
buf.get_current_part() # вернуть [1]
buf.add(5, 4, 2, 7, 1, 87, 14, 2, 1, 6)
buf.get_current_part()