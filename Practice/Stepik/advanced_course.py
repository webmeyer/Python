# Задание 1.
# Реализуйте программу, которая будет вычислять количество различных объектов в списке.
# Два объекта a и b считаются различными, если a is b равно False.

objects = [1, 2, 1, 2, 3]
checker = set()
for obj in objects:
    if id(obj) not in checker:
        checker.add(id(obj))

print(len(checker))



# Задание 2.
# Напишите реализацию функции closest_mod_5, принимающую в качестве единственного аргумента целое число x и возвращающую самое маленькое целое число y, такое что:
#
# y больше или равно x
# y делится нацело на 5

def closest_mod_5(x):
    if x % 5 == 0:
        return x
    else:
        return x + 5 - x % 5
    return "I don't know :("



# Задание 3
# Сочетанием из n элементов по k называется подмножество этих n элементов размера k.
# Два сочетания называются различными, если одно из сочетаний содержит элемент, который не содержит другое.
# Числом сочетаний из n по k называется количество различных сочетаний из n по k. Обозначим это число за C(n, k).

# Реализуйте программу, которая для заданных n и k вычисляет C(n, k).

n, k = map(int, input().split())

def Recurse(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return Recurse(n-1, k) + Recurse(n-1, k-1)

print(Recurse(n, k))



# Задание 4
# Реализуйте класс MoneyBox, для работы с виртуальной копилкой.
#
# Каждая копилка имеет ограниченную вместимость, которая выражается целым числом – количеством монет, которые можно положить в копилку.
# Класс должен поддерживать информацию о количестве монет в копилке, предоставлять возможность добавлять монеты в копилку и узнавать,
# можно ли добавить в копилку ещё какое-то количество монет, не превышая ее вместимость.

class MoneyBox:
    def __init__(self, capacity):   # конструктор с аргументом – вместимость копилки
        self.capacity = capacity
        self.money = 0

    def can_add(self, v):   # True, если можно добавить v монет, False иначе
        if self.money + v <= self.capacity:
            return True
        else:
            return False

    def add(self, v):   # положить v монет в копилку
        if self.can_add(v) == True:
            self.money += v

x = MoneyBox(15)
x.add(5)
x.add(9)
x.add(3)